package app

import (
	"context"
	"fmt"
	"log"

	"authcore.io/authcore/internal/errors"
	"authcore.io/authcore/internal/server"
	"authcore.io/authcore/internal/user"
	"authcore.io/authcore/pkg/cryptoutil"
	"authcore.io/authcore/pkg/nulls"

	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var username string
var password string
var email string
var phone string
var ignore bool

// setupCmd is a cobra command for initial setup
var setupCmd = &cobra.Command{
	Use:   "setup",
	Short: "Authcore first-time setup",

	Run: func(cmd *cobra.Command, args []string) {
		createDB()
		setupAdminUser()
	},
}

// createDB create database and migrate only if database does not yet exists
func createDB() {
	initConfig()
	initDbmate()
	driver, err := db.GetDriver()
	if err != nil {
		log.Fatalf("Database connection fails: %v", err)
		return
	}

	exists, err := driver.DatabaseExists(db.DatabaseURL)
	if err != nil {
		log.Fatalf("Database connection fails: %v", err)
		return
	}

	if !exists {
		createAndMigrate()
	}
}

func setupAdminUser() {
	// Assume email or phone model
	if email == "" && phone == "" {
		log.Fatalf("error: email or phone not provided.\n")
		return
	}

	server := server.NewServer()
	user := &user.User{
		Username:    nulls.NewString(username),
		Email:       nulls.NewString(email),
		Phone:       nulls.NewString(phone),
		Language:    nulls.NewString(viper.GetString("default_language")),
	}
	randomPassword := false
	if password == "" {
		password = cryptoutil.RandomToken()
		randomPassword = true
	}

	user, err := server.CreateFirstAdminUser(context.Background(), user, password)
	if err != nil {
		// suppress if it already exists and ignore flag is on
		if ignore && errors.IsKind(err, errors.ErrorAlreadyExists) {
		} else {
			log.Fatalf("error: %s\n", err)
			return
		}
	}

	fmt.Printf("Registered new admin user (ID %v)\n", user.ID)
	if randomPassword {
		fmt.Printf("New password: %s\n", password)
	}
}

func init() {
	setupCmd.Flags().StringVarP(&username, "username", "u", "admin", "A unique username for the first user")
	setupCmd.Flags().StringVarP(&password, "password", "p", "", "Password to be used by the first user. If omitted, a new password will be generated by the command")
	setupCmd.Flags().StringVarP(&email, "email", "e", "", "Email address of the first user")
	setupCmd.Flags().StringVarP(&phone, "phone", "t", "", "Phone number of the first user")
	setupCmd.Flags().BoolVar(&ignore, "ignore", false, "Ignore error generated if it is not first time")
}
