syntax = "proto3";

package authcore.secretdgateway.v1;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "authcore.io/authcore/pkg/api/secretdgateway";

service SecretdGateway {
  // Forwards a request to secretd. Secretd will directly authenticates the request and the
  // messages are end-to-end encrypted.
  rpc Forward(ForwardRequest) returns (ForwardResponse) {
    option (google.api.http) = {
      post: "/forward"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Forward a request to secretd";
      description: "Forwards a request to secretd. Secretd directly authenticates the request and the messages are end-to-end encrypted.";
      security: {
        security_requirement: {
          key: "AccessToken";
          value: {}
        }
      }
    };
  }

  rpc GetInfo(GetInfoRequest) returns (Info) {
    option (google.api.http) = {
      get: "/info"
    };
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      summary: "Get information about a secretd service";
      description: "Returns information about a secretd service";
      security: {
        security_requirement: {
          key: "AccessToken";
          value: {}
        }
      }
    };
  }
}

message ForwardRequest {
  // A stateless secretd request message.
  bytes request_message = 1;
}

message ForwardResponse {
  // A stateless secretd response message.
  bytes response_message = 1;
}

message GetInfoRequest {
}

message Info {
  string cluster_identity = 1;
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  base_path: "/api/secretdgateway",
  security_definitions: {
    security: {
      key: "AccessToken";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      }
    }
  }
};