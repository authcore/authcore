stages:
  - test
  - build
  - package
  - build images
  - deploy

variables:
  MYSQL_ROOT_PASSWORD: testing
  # Required by Kubernetes runner
  DOCKER_HOST: tcp://localhost:2375

  AUTHCORE_IMAGE_TAG: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}"

  RELEASE_IMAGE: "gcr.io/enyk-releng/authcore"

#######################################################################
# Authcore                                                            #
#######################################################################

# Test

test server:
  stage: test
  services:
    - mysql:8.0
  image: golang:1.13
  script:
    - scripts/test.sh
    - scripts/lint.sh
  coverage: '/total:\s+\(statements\)\s+\d+.\d+\%/'
  variables:
    TEST_DATABASE_URL: mysql://root:testing@localhost/authcore_test?parseTime=true

test widgets:
  stage: test
  image: node:lts
  before_script:
    - cd web/widgets
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf https://gitlab.com/
    - yarn install --network-concurrency 1
  script:
    - yarn lint
    - yarn test
  coverage: '/Lines\s*:\s*(\d*\.?\d+)%/'
  artifacts:
    when: always
    paths:
      - web/widgets/coverage
      - web/widgets/mochawesome-report

test web:
  stage: test
  image: node:lts
  before_script:
    - cd web/management
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf https://gitlab.com/
    - yarn install --network-concurrency 1
  script:
    - yarn lint
    - yarn test
  coverage: '/Lines\s*:\s*(\d*\.?\d+)%/'
  artifacts:
    when: always
    paths:
      - web/coverage
      - web/mochawesome-report

audit widgets:
  stage: test
  image: node:lts
  before_script:
    - cd web/widgets
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf https://gitlab.com/
    - yarn install --network-concurrency 1
  script:
    - yarn audit
  allow_failure: true

audit web:
  stage: test
  image: node:lts
  before_script:
    - cd web/management
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf https://gitlab.com/
    - yarn install --network-concurrency 1
  script:
    - yarn audit
  allow_failure: true

# Build

build server:
  stage: build
  image: golang:1.13
  script:
    - scripts/build.sh
  artifacts:
    paths:
      - build
  variables:
    GOPATH: ${CI_PROJECT_DIR}/go

build widgets:
  stage: build
  image: node:lts
  before_script:
    - cd web/widgets
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf https://gitlab.com/
    - yarn install --network-concurrency 1
  script:
    - yarn build
  artifacts:
    paths:
      - web/dist/widgets

build web:
  stage: build
  image: node:lts
  before_script:
    - cd web/management
    - git config --global url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf https://gitlab.com/
    - yarn install --network-concurrency 1
  script:
    - yarn build
  artifacts:
    paths:
      - web/dist/web

# build docs:
#   stage: build
#   image: node:lts
#   before_script:
#     - cd web/docs
#     - yarn install
#   script:
#     - yarn build
#   artifacts:
#     paths:
#       - web/dist/docs

# Package

package:
  stage: package
  image: golang:1.13
  script:
    - scripts/package.sh
  artifacts:
    paths:
      - dist
  only:
    - master
    - develop
    - /^release-.*$/
    - tags

# Build images

build images:
  stage: build images
  services:
    - docker:dind
  image: docker:latest
  dependencies:
    - package
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - docker build --build-arg COMMIT_REF_NAME="$CI_COMMIT_REF_NAME" --pull -t "$AUTHCORE_IMAGE_TAG" -f deployments/dockerfiles/Dockerfile dist
    - docker push "$AUTHCORE_IMAGE_TAG"
  only:
    - master
    - develop
    - /^release-.*$/
    - tags

# Deploy

release images:
  stage: deploy
  services:
    - docker:dind
  image: docker:latest
  dependencies: []
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - cat ${CI_DOCKER_KEY_FILE} | docker login -u _json_key --password-stdin gcr.io
  script:
    - docker pull ${AUTHCORE_IMAGE_TAG}
    - docker tag ${AUTHCORE_IMAGE_TAG} ${RELEASE_IMAGE}:${CI_COMMIT_REF_NAME}
    - docker push ${RELEASE_IMAGE}
  only:
    - /^release-.*$/
    - tags

# pages:
#   stage: deploy
#   image: node:lts
#   script:
#     - scripts/docs.sh
#     - mv build/docs public
#   artifacts:
#     paths:
#       - public
#   only:
#     - master